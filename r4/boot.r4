-- punua -- maori for "small, of minor significance"

[:v]-> %assemble ((v v))
    scheme -> (etng-define! (etng-scope-parent the-environment)
			    'define-in-current-namespace! #t v) ;;
  [:n :v]->
    %assemble ((n n) (v v))
      scheme -> (etng-define! (etng-scope-parent the-environment)
			      (string->symbol n) #f v)

define-in-current-namespace! "macro" [:fn]->
  %assemble ((fn fn))
    scheme -> (etng-object->macro fn)

define-in-current-namespace! "."
  macro [:env :form] ->
    %assemble ((env env) (form form))
      scheme -> (etng-perform-definition! env #t form)

define-in-current-namespace! ":"
  macro [:env :form] ->
    %assemble ((env env) (form form))
      scheme -> (etng-perform-definition! env #f form)

. raw_callcc [:fn]->
    %assemble ((fn fn))
      scheme -> (call-with-current-continuation (lambda (k) (etng-send fn (list k))))

: callcc [:fn]->
  raw_callcc [:k]-> fn [:v]-> %assemble ((v v) (k k)) scheme -> (k v)

: extends [:base :extension]->
  %assemble ((extension extension) (base base))
    scheme -> (make-etng-merge base extension)

: responds? [:what :to]->
  %assemble ((what what) (to to))
    scheme -> (etng-responds? what to)

: as [:receiver :via]->
  :message ->
    %assemble ((receiver receiver) (via via) (message message))
      scheme -> (etng-send* receiver via message)

: not

: false	%assemble () scheme -> (not (quote nonfalse))
: true	%assemble () scheme -> (not (not (quote nonfalse)))

: rec [:name :fn]->
	%assemble ((name name) (fn fn))
	  scheme -> (make-recursive-object (etng-binding-identifier name) fn)
      [:fn]->
	%assemble ((fn fn))
	  scheme -> (make-recursive-object 'self fn)

: booleanBehaviour
  rec [not]-> %assemble ((x self)) scheme -> (not x)

: booleanCase

: installProxy! [:name :proxy]->
  %assemble ((name name) (proxy proxy))
    scheme -> (etng-install-proxy! name proxy)

installProxy! "false" (extends booleanBehaviour [booleanCase :v]-> v false)
installProxy! "true"  (extends booleanBehaviour [booleanCase :v]-> v true)

: case [:x :options] -> options || x

: if [:x :options] -> x booleanCase options

: meta [:fn] ->
  %assemble ((fn fn))
    scheme -> (make-etng-meta fn)

: matchValue

. _
: _ extends _ (meta [:p matchValue :v :ns]-> true)

: id [:v]-> v

: <
: >
: +
: -
: *
: /
: ==

: eq [:x :y]-> %assemble ((x x) (y y)) scheme -> (eq? x y)

: write [:x]-> %assemble ((x x)) scheme -> (begin (write x) (newline))

: Eq rec [== :other]-> %assemble ((a self) (b other)) scheme -> (eqv? a b)

installProxy! "number"
  rec [+ :other]-> %assemble ((a self) (b other)) scheme -> (+ a b)
      [- :other]-> %assemble ((a self) (b other)) scheme -> (- a b)
      [* :other]-> %assemble ((a self) (b other)) scheme -> (* a b)
      [/ :other]-> %assemble ((a self) (b other)) scheme -> (/ a b)
      [< :other]-> %assemble ((a self) (b other)) scheme -> (< a b)

: ? :message -> [:receiver] -> receiver || message
: ?? [:binop] -> [:l :r] -> l binop r

: symbol [:nsname :symname] ->
  %assemble ((nsname nsname) (symname symname))
    scheme -> (make-etng-symbol nsname (string->symbol symname))

-- . ++ symbol "http://eighty-twenty.org/etng/r4/ns/stream#" "++"
-- : curry ([:receiver] ++ :left)-> :right -> receiver || (left ++ right)
-- : <> ([:receiver] ++ :message) -> receiver || message

: iterate [:n :v :f]->
  case n
    0 -> v
    _ -> iterate (n - 1) (f v) f

: compose  [:f :g]-> :message -> g (f || message)
: compose' [:g :f]-> compose f g

: new

: load [:filename]->
  %assemble ((filename filename))
    scheme -> (load-etng-file (eval-etng (etng-scope-parent the-environment)) filename)

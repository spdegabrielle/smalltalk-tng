: stream module "http://eighty-twenty.org/etng/r4/ns/stream#" [:platform]->
  : next
  : yield
  : skip
  : done

  : head
  : tail
  : foldl
  : foldr
  : foldlK
  : foldrK
  : length
  : drop
  : nth
  : do
  : reverse
  : ++
  : concatenate
  : map

  : Stream
    rec [head]->
	  self next
	    [done]		-> error "head of empty stream"
	    [skip :s1]		-> s1 head
	    [yield :v _]	-> v
	[tail]->
	  self next
	    [done]		-> error "tail of empty stream"
	    [skip :s1]		-> s1 tail
	    [yield _ :s1]	-> s1
	[foldl :knil :kons]->
	  self next
	    [done]		-> knil
	    [skip :s1]		-> s1 foldl knil kons
	    [yield :v :s1]	-> s1 foldl (kons v knil) kons
	[foldr :knil :kons]->
	  self next
	    [done]		-> knil
	    [skip :s1]		-> s1 foldr knil kons
	    [yield :v :s1]	-> kons v (s1 foldr knil kons)
	[foldlK :knil :kons :k]->
	  self next
	    [done]		-> k knil
	    [skip :s1]		-> s1 foldlK knil kons k
	    [yield :v :s1]	-> kons v knil [:newSeed]-> s1 foldlK newSeed kons k
	[foldrK :knil :kons :k]->
	  self next
	    [done]		-> k knil
	    [skip :s1]		-> s1 foldrK knil kons k
	    [yield :v :s1]	-> s1 foldrK knil kons [:newSeed]-> kons v newSeed k
	[length]->
	  self foldl 0 [:item :acc]-> acc + 1
	[drop :n]->
	  iterate n self (? tail)
	[nth :n]->
	  (self drop n) head
	[do :f] ->
	  self foldl done [:item done]-> f item; done
	[reverse]->
	  self foldl empty cons
	[++ :other]->
	  self foldr other cons
	[concatenate]->
	  self foldr empty (?? ++)
	[map :f]->
	  self foldr empty [:item :tail]-> cons (f item) tail

  : empty	 		extends Stream [next :k]-> k done
  : cons [:head :tail]->	extends Stream [next :k]-> k yield head tail

  installProxy! "tuple"
    extends Stream
      rec [nth :n]	-> %assemble ((v self) (n n)) scheme -> (vector-ref v n)
	  [next :k]	-> (tupleIterator self 0) next k

  : tupleIterator [:tuple :index]->
    extends Stream
      if (index < (tuple length))
	[true]->  [next :k]-> k yield (tuple nth index) (tupleIterator tuple (index + 1))
	[false]-> [next :k]-> k done

  installProxy! "null" empty
  installProxy! "pair"
    extends Stream
      rec [next :k]-> k yield (self head) (self tail)
	  [head]-> %assemble ((v self)) scheme -> (car v)
	  [tail]-> %assemble ((v self)) scheme -> (cdr v)

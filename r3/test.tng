define map [
  f: [#nil            : #nil
      [#hd: h #tl: t] : [#hd: (f h) #tl: (map f t)]]
];;

(arg #hd)
(arg #tl)

"a pattern:" [(a b): _]
"-->" (arg (a b))

define fold-left [
  kons: [knil: [#nil            : knil
                [#hd: h #tl: t] : (fold-left kons (kons h knil) t)]]
];;

map [x: x + 1] ([1, 2, 3] asList);;

letrec (map = [f: [#nil            : #nil
	           [#hd: h #tl: t] : [#hd: (f h) #tl: (map f t)]]],
	toList = [[]      : #nil
		  [h ; t] : [#hd: h #tl: (toList t)]]); "yikes"
map [x: x] (toList [1 2 3])
;;

map [x: x + 1] (toList [1 2 3]);;

[x: (#update: [] #set: x #to: 123)] 'hi';;

define-behaviour Cst;;
define-method ({Cst cst} #convert) (
  case: {cst} of: (
    [ [#adj: [l, r]] : [(l #convert) (r #convert)] ],
    [   [#tuple: cs] : (let cs* = map [x: x #convert] cs in {Tuple cs*}) ],
    [    [#quote: v] : v ],
    [              _ : cst ]
  )
);;

"To lift something:" {lifted} <- val
"To drop something:" val <- {lifted}

define-method ({Tuple x} #length) (
  x #length;;
);;

define-method ({Tuple x} #asList) (
  (0 .. (x #length)) #map: ((?) x) "'x ? i' means 'read the ith elt of x'"
);;

"A monadic version:"
"(This is stupid code anyway because it's a lazy language,
it already delays and evaluates once!)"
"We don't put the 'atomic' in here to stay compositional as long as possible"
define-method ((results = {ParseResults _}) #next) (
  [has-value, next] <- (#read: (results #next*)),
  #if: has-value
  #then: return next
  #else: (next-value <- (return (next [])),
	  #into: (results #next*) #write: [#true, next-value],
	  return next-value)
);;
